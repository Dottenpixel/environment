set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
 call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

"####### My Bundles #########

"github
Bundle 'kien/ctrlp.vim'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'msanders/snipmate.vim'
Bundle 'scrooloose/syntastic'
Bundle 'altercation/vim-colors-solarized'
Bundle 'vim-scripts/taglist.vim'
Bundle 'vim-scripts/vcscommand.vim'
Bundle 'vim-scripts/EasyMotion'
Bundle 'vim-scripts/matchit.zip'
Bundle 'nvie/vim-togglemouse'
Bundle 'Raimondi/delimitMate'
Bundle 'vim-scripts/asciidoc.vim'
Bundle 'ervandew/supertab'
Bundle 'vimoutliner/vimoutliner.git'
Bundle 'Lokaltog/vim-powerline.git'
Bundle 'vim-scripts/Gundo.git'
Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-rails'
"Vimscript
Bundle 'JSON.vim'
"Bundle 'javascript.vim'
" Color Scheme stuffs
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized


" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugin
filetype plugin on
filetype indent on
filetype on
syntax enable
set grepprg=grep\ -nH\ $*
set autoindent
set number
set nohidden

set cul                                           " highlight current line
hi CursorLine term=none cterm=none ctermbg=3      " adjust color

" Set to auto read when a file is changed from the outside
set autoread
" When vimrc is edited, reload it
autocmd! bufwritepost vimrc source ~/.vimrc

set ruler "Always show current position

set cmdheight=2 "The commandbar height

set ignorecase "Ignore case when searching

set hlsearch "Highlight search things

set incsearch "Make search act like search in modern browsers
set nolazyredraw "Don't redraw while executing macros 

set magic "Set magic on, for regular expressions

set showmatch "Show matching bracets when text indicator is over them
set mat=2 "How many tenths of a second to blink

syntax enable "Enable syntax hl

" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

if $WORK
  set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
else
  set softtabstop=2
  set shiftwidth=2
  set tabstop=2
  set expandtab
endif

set lbr
set tw=500

set ai "Auto indent
set si "Smart indet
set wrap "Wrap lines

" Close the current buffer
map <leader>bd :Bclose<cr>

vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a"<esc>`<i"<esc>

" Map auto complete of (, ", ', [
inoremap $1 ()<esc>i
inoremap $2 []<esc>i
inoremap $3 {}<esc>i
inoremap $4 {<esc>o}<esc>O
inoremap $q ''<esc>i
inoremap $e ""<esc>i
inoremap $t <><esc>i

""""""""""""""""""""""""""""""
" => JavaScript section
"""""""""""""""""""""""""""""""
au FileType javascript setl fen
au FileType javascript setl nocindent

function! JavaScriptFold()
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction

" Automatically cd into the directory that the file is in
autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')

set showcmd

let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1


let Tlist_Ctags_Cmd = "jsctags"
let Tlist_WinWidth = 50
map <F4> :TlistToggle<cr>

" Remap SnipMate Kec-tab>'y
let g:snips_trigger_key = '<C-tab>'


"ctrlp stuff 
let g:ctrlp_map = '<c-p>'
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_working_path_mode = 0

"Enable mouse support in xterm 
set mouse=a
set ttymouse=xterm2
"Status Line Stuffs
augroup ft_statuslinecolor
  au!
  au InsertEnter * hi StatusLine ctermfg=lightgreen guifg=lightgreen
  au InsertLeave * hi StatusLine ctermfg=white guifg=white
augroup END

"set statusline= 
"set statusline+=B[%3.3n 
"set statusline+=]\ %F\ 
"set statusline+=%{&fileformat}\ 
"set statusline+=%{strlen(&fenc)?&fenc:&enc}\ " encoding
"set statusline+=%y"filetype
"set statusline+=%#redbar# "highlight bar red on error or warnings
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*                           " Reset highlighting.

"set statusline+=%= "align things below right

"set statusline+=%c,%l/%L\ %P\ "cursor column cursor line/total lines percent through file

set laststatus=2


highlight flicker cterm=bold ctermfg=white
au CursorMoved <buffer> exe 'match flicker /\V\<'.escape(expand('<cword>'), '/').'\>/'


"set file types
au BufNewFile,BufRead *.phc set filetype=php
au BufNewFile,BufRead *.tpl set filetype=html
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.asc set filetype=asciidoc

"JSON File Stuff
au BufNewFile,BufRead *.json set filetype=json
"Pretty Print JSON files using python simplejson
":command PrettyJSON :'<,'>!python -m simplejson.tool
function! PrettyJSON()
  :%!python -m simplejson.tool
  set filetype=json
endfunction
:command PrettyJSON :call PrettyJSON()

"mini buf stuff
let g:miniBufExplCloseOnSelect = 0 

"ezmotion


"Indent
"" CSS (tab width 2 chr, wrap at 79th char)
autocmd FileType css set sw=2
autocmd FileType css set ts=2
autocmd FileType css set sts=2
autocmd FileType css set textwidth=79
" JavaScript (tab width 2 chr, wrap at 79th)
autocmd FileType javascript set sw=2
autocmd FileType javascript set ts=2
autocmd FileType javascript set sts=2
autocmd FileType javascript set textwidth=79
" HTML (tab width 2 chr, no wrapping)
autocmd FileType html set sw=2
autocmd FileType html set ts=2
autocmd FileType html set sts=2
autocmd FileType html set textwidth=0

"Omnicomplete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

"Keep current line centered
"set so=999

"Nerd tree
nnoremap <leader>n :NERDTreeToggle<cr>

"Visual Search
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction

vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR>


"stupid stuff
function! NyanMe() " {{{
    hi NyanFur             guifg=#BBBBBB
    hi NyanPoptartEdge     guifg=#ffd0ac
    hi NyanPoptartFrosting guifg=#fd3699 guibg=#fe98ff
    hi NyanRainbow1        guifg=#6831f8
    hi NyanRainbow2        guifg=#0099fc
    hi NyanRainbow3        guifg=#3cfa04
    hi NyanRainbow4        guifg=#fdfe00
    hi NyanRainbow5        guifg=#fc9d00
    hi NyanRainbow6        guifg=#fe0000


    echohl NyanRainbow1
    echon "≈"
    echohl NyanRainbow2
    echon "≋"
    echohl NyanRainbow3
    echon "≈"
    echohl NyanRainbow4
    echon "≋"
    echohl NyanRainbow5
    echon "≈"
    echohl NyanRainbow6
    echon "≋"
    echohl NyanRainbow1
    echon "≈"
    echohl NyanRainbow2
    echon "≋"
    echohl NyanRainbow3
    echon "≈"
    echohl NyanRainbow4
    echon "≋"
    echohl NyanRainbow5
    echon "≈"
    echohl NyanRainbow6
    echon "≋"
    echohl None
    echo ""

    echohl NyanRainbow1
    echon "≈"
    echohl NyanRainbow2
    echon "≋"
    echohl NyanRainbow3
    echon "≈"
    echohl NyanRainbow4
    echon "≋"
    echohl NyanRainbow5
    echon "≈"
    echohl NyanRainbow6
    echon "≋"
    echohl NyanRainbow1
    echon "≈"
    echohl NyanRainbow2
    echon "≋"
    echohl NyanRainbow3
    echon "≈"
    echohl NyanRainbow4
    echon "≋"
    echohl NyanRainbow5
    echon "≈"
    echohl NyanRainbow6
    echon "≋"
    echohl NyanFur
    echon "╰"
    echohl NyanPoptartEdge
    echon "⟨"
    echohl NyanPoptartFrosting
    echon "⣮⣯⡿"
    echohl NyanPoptartEdge
    echon "⟩"
    echohl NyanFur
    echon "⩾^ω^⩽"
    echohl None
    echo ""

    echohl NyanRainbow1
    echon "≈"
    echohl NyanRainbow2
    echon "≋"
    echohl NyanRainbow3
    echon "≈"
    echohl NyanRainbow4
    echon "≋"
    echohl NyanRainbow5
    echon "≈"
    echohl NyanRainbow6
    echon "≋"
    echohl NyanRainbow1
    echon "≈"
    echohl NyanRainbow2
    echon "≋"
    echohl NyanRainbow3
    echon "≈"
    echohl NyanRainbow4
    echon "≋"
    echohl NyanRainbow5
    echon "≈"
    echohl NyanRainbow6
    echon "≋"
    echohl None
    echon " "
    echohl NyanFur
    echon "”   ‟"
    echohl None

    sleep 5
    redraw
    echo " "
    echo " "
    echo "Noms?"
    redraw
endfunction " }}}
command! NyanMe call NyanMe()


"VCS Commands
nnoremap <leader>d :VCSDiff <cr>
nnoremap <leader>c :VCSCommit <cr>
nnoremap <leader>q :bw <cr>


