"""""""""""""""""""""""""""""""""""""""""""""""
"  __   __ __   __    __   ______   ______    "
" /\ \ / //\ \ /\ "-./  \ /\  == \ /\  ___\   "
" \ \ \'/ \ \ \\ \ \-./\ \\ \  __< \ \ \____  "
"  \ \__|  \ \_\\ \_\ \ \_\\ \_\ \_\\ \_____\ " 
"   \/_/    \/_/ \/_/  \/_/ \/_/ /_/ \/_____/ " 
"                                             "  
"""""""""""""""""""""""""""""""""""""""""""""""
                                            
"""""""""""""""""""""""""""""""
"                             "   
"        Basic Setup          "   
"                             "    
"""""""""""""""""""""""""""""""

set nocompatible               "be iMproved
filetype off                   "required!
set rtp+=~/.vim/bundle/vundle/ "Where are the bundles located
call vundle#rc()               "vundler setup

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                             "
" => Plugins                                                                  "
"                                                                             "
"Bundle 'gmarik/vundle'                    "Plugin Manager                    "  
"Bundle 'vim-scripts/L9'                   "VIMScript Programming Libraries   "
"Bundle 'fholgado/minibufexpl.vim'         "List your buffers                 "
"Bundle 'scrooloose/nerdtree'              "File Manager                      "
"Bundle 'scrooloose/syntastic'             "Static Analysis                   "
"Bundle 'tsaleh/vim-matchit'               "Auto insert closing character     "
"Bundle 'wincent/Command-T'                "Fuzzy File Finder                 "
"Bundle 'altercation/vim-colors-solarized' "Color Scheme                      "
"Bundle 'vim-scripts/vcscommand.vim'       "Source Control tools              "
"Bundle 'tpope/vim-fugitive'               "GIT Specific tools                " 
"Bundle 'nvie/vim-togglemouse'             "Yes I still use the mouse         "     
"Bundle 'Raimondi/delimitMate'             "Go to the closing character / tag "
"Bundle 'Lokaltog/vim-powerline.git'       "Better Status Line                "
"Bundle 'jnwhiteh/vim-golang.git'          "GO Lang support                   " 
"Bundle 'Shougo/neocomplcache'             "Pretty Good Autocomplete          "
"Bundle 'Shougo/neosnippet'                "Code snippets and expansion       "
"Bundle 'JSON.vim'                         "JSON Code highlight               "     
"                                                                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Bundle 'gmarik/vundle'                          
Bundle 'vim-scripts/L9'                         
Bundle 'fholgado/minibufexpl.vim'               
Bundle 'scrooloose/nerdtree'                     
Bundle 'scrooloose/syntastic'                   
Bundle 'tsaleh/vim-matchit'                     
Bundle 'wincent/Command-T'                      
Bundle 'altercation/vim-colors-solarized'       
Bundle 'vim-scripts/vcscommand.vim'             
Bundle 'tpope/vim-fugitive'                     
Bundle 'nvie/vim-togglemouse'                   
Bundle 'Raimondi/delimitMate'                   
Bundle 'Lokaltog/vim-powerline.git'             
Bundle 'jnwhiteh/vim-golang.git'                
Bundle 'Shougo/neocomplcache'                   
Bundle 'Shougo/neosnippet' 
Bundle 'JSON.vim'

"""""""""""""""""""""""""""""""
"                             "
"      Custom Functions       "
"                             "    
"""""""""""""""""""""""""""""""

"Clean trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

"Format JSON
fun! PrettyJSON()
  :%!python -m simplejson.tool
  set filetype=json
endfun

"""""""""""""""""""""""""""""""
"                             "
"         Appearance          "
"                             "     
"""""""""""""""""""""""""""""""

" Color Scheme stuffs
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

hi CursorLine term=none cterm=none ctermbg=3 "adjust color
set ruler        "Always show current position
set cul          "highlight current line
set hlsearch     "Highlight search things
set cmdheight=2  "The commandbar height
set number       "show line numbers"
set nohidden     "dont unload my buffer"
set nolazyredraw "Don't redraw while executing macros 
set showmatch    "Show matching bracets when text indicator is over them
set laststatus=2 "always have a status bar"
set showcmd      "show information about the current command
set mat=2        "How many tenths of a second to blink
syntax enable    "Enable syntax hl

"""""""""""""""""""""""""""""""
"                             "
"          MISC VIM           "
"                             " 
"""""""""""""""""""""""""""""""

set history=700                             "Sets how many lines of history VIM has to remember
set autoread                                "Set to auto read when a file is changed from the outside
set bs=2                                    "allow backspace
set pastetoggle=<f10>                       "Better paste behavior
autocmd! bufwritepost vimrc source ~/.vimrc "When vimrc is edited, reload it

"Search Options
set ignorecase "Ignore case when searching
set incsearch  "Make search act like search in modern browsers
set magic      "Set magic on, for regular expressions

" Enable filetype plugin
filetype plugin on
filetype indent on
filetype on
syntax enable

" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

" Stop beeping at me bro
set noerrorbells 
set vb 
set t_vb="."

"Enable mouse support in xterm 
set mouse=a
set ttymouse=xterm2

"Load Project specific .vimrc 
set exrc   "enable per-directory .vimrc files
set secure "disable unsafe commands in local .vimrc files

"""""""""""""""""""""""""""""""
"                             " 
"     Spacing and Lines       "
"                             "
"""""""""""""""""""""""""""""""

set autoindent "auto indent the next line

" Tabs
if $WORK
  set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
else
  set tabstop=4 softtabstop=2 shiftwidth=4 expandtab
endif

" Line Wrapping
set tw=500 "Max text width"
set ai     "Auto indent
set si     "Smart indet
set wrap   "Wrap lines

"""""""""""""""""""""""""""""""
"                             "
"         Leader Key          "
"                             "  
"""""""""""""""""""""""""""""""

nnoremap <leader>q :bw <cr>            "close buffer
nnoremap <leader>n :NERDTreeToggle<cr> "toggle nerdtree
nnoremap <leader>d :VCSVimDiff <cr>    "Nice File Diff
nnoremap <leader>c :VCSCommit <cr>     "Commit Changes
nnoremap <leader>s :Gstatus <cr>       "GIT Status
"Change Tab Spacing
nnoremap <leader>2 <esc>:set expandtab tabstop=2 softtabstop=2 shiftwidth=2<cr>
nnoremap <leader>4 <esc>:set expandtab tabstop=4 softtabstop=4 shiftwidth=4<cr>
nnoremap <leader>8 <esc>:set expandtab tabstop=8 softtabstop=8 shiftwidth=8<cr>

"""""""""""""""""""""""""""""""
"                             "
"          Language           "
"                             "
"""""""""""""""""""""""""""""""

" => CSS
" CSS (tab width 2 chr, wrap at 79th char)
autocmd FileType css set sw=2
autocmd FileType css set ts=2
autocmd FileType css set sts=2
autocmd FileType css set textwidth=79
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS

" => HTML
" HTML (tab width 2 chr, no wrapping)
autocmd FileType html set sw=2
autocmd FileType html set ts=2
autocmd FileType html set sts=2
autocmd FileType html set textwidth=0
autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags

" => JavaScript
au FileType javascript setl fen
au FileType javascript setl nocindent
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType javascript autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" JavaScript (tab width 2 chr, wrap at 79th)
autocmd FileType javascript set sw=2
autocmd FileType javascript set ts=2
autocmd FileType javascript set sts=2
autocmd FileType javascript set textwidth=79

" => Markdown
au BufNewFile,BufRead *.md set filetype=markdown "set file types
autocmd FileType markdown setlocal omnifunc=htmlcomplete#CompleteTags

" => JSON
au BufNewFile,BufRead *.json set filetype=json
:command! PrettyJSON :call PrettyJSON()

" => GO Lang
set rtp+=$GOROOT/misc/vim

"""""""""""""""""""""""""""""""
"                             "
"       Plugin Config         "
"                             "
"""""""""""""""""""""""""""""""

" => scrooloose/syntastic
let g:syntastic_enable_signs=1
let g:syntastic_error_symbol="✗"
let g:syntastic_warning_symbol="⚠"
let g:syntastic_enable_balloons = 1
let g:syntastic_enable_highlighting = 1 

" => fholgado/minibufexpl.vim
let g:miniBufExplCloseOnSelect = 0 

" => Shougo/neocomplcache-snippets-complete
imap <C-k> <Plug>(neocomplcache_snippets_expand) 
smap <C-k> <Plug>(neocomplcache_snippets_expand) 
" For snippet_complete marker. 
if has('conceal') 
  set conceallevel=2 concealcursor=i 
endif

let g:neocomplcache_snippets_dir=$HOME."/environment/snippets"

" => Shougo/neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_auto_completion_start_length=4
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" For cursor moving in insert mode(Not recommended)
inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"

imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ?
 \ "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" => wincent/Command-T
let g:CommandTMatchWindowAtTop = 1
set ttimeoutlen=50

"get escape to work in the terminal for closing the command-t window
if &term =~ "xterm" || &term =~ "screen"
  let g:CommandTCancelMap     = ['<ESC>', '<C-c>']
  let g:CommandTSelectNextMap = ['<C-n>', '<C-j>', '<ESC>OB']
  let g:CommandTSelectPrevMap = ['<C-p>', '<C-k>', '<ESC>OA']
endif

" => Lokaltog/vim-powerline.git
let g:Powerline_dividers_override = ['>>', '>', ]


