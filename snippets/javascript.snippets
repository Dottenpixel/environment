#Debug Snippet
snippet log
	console.log('%cJRM DEBUG ========= File `expand('%:p')` Line `line(".")`', "color:pink;font-weight:bolder;background-color:black; padding:3px 13px;margin:0 5px 0 0;");
	console.log('${1:string}');
	console.log('%c=====================', "color:pink;font-weight:bolder;background-color:black;padding:3px 13px;margin:5px 0 0 0;");


snippet log_r
	console.log('%cJRM DEBUG ========= File `expand('%:p')` Line `line(".")`', "color:red;font-weight:bolder;background-color:black; padding:3px 13px");
	console.dir(${1:variable});
	console.log('%c=====================', "color:red;font-weight:bolder;background-color:black;padding:3px 13px");

	define(function (require) {
		'use strict';
		${1:string}	
	});

snippet extend 
	define(['${1:module}'], function (${2:module}) {
		
        function ${3:constructor}() {
            ${4:code}
        }

        return $2.extend({
            constructor: $3    
        });
	});

snippet define
	define(function (require) {
		${1:code}	
	});
    
snippet spec
	define(['${1:module}'], function (${2:module}) {
		describe('${3:specName}', function () {
				
			beforeEach(function () {
				${4:setup}	
			});

			afterEach(function () {
				${5:teardown}	
			});

			it('should be sane', function () {
				expect(true).toBeTruthy();	
			});

			it('${6:expectation}', function () {
				${8:test}	
			});

		});

		return {
			name: '${7:module}Spec'	
		}
	});


snippet it
	it('${1:expectation}', function () {
		${2:test}		
	});


snippet iife
	(function () {
		${1:code}	
	}());


snippet biife
	(function (window, undefined) {
		${1:code}		
	} (this));


snippet siife
	(function (window, SPX, $, undefined) {
		${1:code}		
	} (this, this.SPX, this.$));








